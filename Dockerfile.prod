# Multi-stage production Dockerfile for GCP Cloud Run
FROM python:3.11-slim AS builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .

# Add GCP dependencies
RUN echo "cloud-sql-python-connector[pg8000]>=1.4.0" >> requirements.txt
RUN echo "google-cloud-secret-manager>=2.16.0" >> requirements.txt

RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.11-slim AS production

# Install runtime dependencies including Cloud SQL Proxy
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Cloud SQL Proxy
RUN wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /usr/local/bin/cloud_sql_proxy
RUN chmod +x /usr/local/bin/cloud_sql_proxy

# Create non-root user
RUN groupadd -r betting && useradd -r -g betting betting

# Set work directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /root/.local /home/betting/.local

# Copy application code
COPY --chown=betting:betting . .

# Create logs directory
RUN mkdir -p logs && chown betting:betting logs

# Make sure scripts are executable (create if not exist)
RUN mkdir -p scripts && chown betting:betting scripts

# Switch to non-root user
USER betting

# Add local bin to PATH
ENV PATH=/home/betting/.local/bin:$PATH

# Health check (Cloud Run uses port 8080)
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose Cloud Run port
EXPOSE 8080

# Start with uvicorn directly (Cloud Run compatible)
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "1"]